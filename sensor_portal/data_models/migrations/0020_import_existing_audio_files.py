# Generated by Django 4.2 on 2024-03-19 10:00

import os
import glob
import datetime
from django.db import migrations, models
from django.utils import timezone
import django.db.models.deletion


def discover_and_import_audio_files(apps, schema_editor):
    """
    Discover audio files in the proj_tabmon_NINA folders and import them into the database.
    """
    # Get models from apps registry to avoid circular import issues
    DataType = apps.get_model('data_models', 'DataType')
    Device = apps.get_model('data_models', 'Device')
    Deployment = apps.get_model('data_models', 'Deployment')
    DataFile = apps.get_model('data_models', 'DataFile')
    Project = apps.get_model('data_models', 'Project')
    Site = apps.get_model('data_models', 'Site')
    DeviceModel = apps.get_model('data_models', 'DeviceModel')

    # Base directory for audio files
    base_dir = "/Users/noahsyrdal/ARISE-MDS-sensor-portal-Pam/proj_tabmon_NINA"
    
    # Create or get default data type
    audio_type, _ = DataType.objects.get_or_create(name='Audio')
    
    # Create or get default device model
    audio_recorder_model, _ = DeviceModel.objects.get_or_create(
        name='AudioMoth',
        defaults={
            'manufacturer': 'Open Acoustic Devices',
            'type': audio_type
        }
    )
    
    # Create or get default site
    default_site, _ = Site.objects.get_or_create(
        name='NINA Default Site',
        defaults={'short_name': 'NINA'}
    )
    
    # Create or get default project
    nina_project, _ = Project.objects.get_or_create(
        project_ID='NINA_PROJ',
        defaults={
            'name': 'NINA Acoustic Monitoring Project',
            'objectives': 'Audio monitoring for wildlife research'
        }
    )
    
    # Process each device folder
    device_folders = [
        ('bugg_RPiID-10000000d2b4d01e', '10000000d2b4d01e'),
        ('bugg_RPiID-10000000d642707c', '10000000d642707c')
    ]
    
    for folder_name, device_id in device_folders:
        folder_path = os.path.join(base_dir, folder_name)
        if not os.path.exists(folder_path):
            print(f"Folder not found: {folder_path}")
            continue
        
        # Create or get device
        device, created = Device.objects.get_or_create(
            device_ID=device_id,
            defaults={
                'name': f'AudioMoth {device_id[-6:]}',
                'model': audio_recorder_model,
                'type': audio_type,
                'country': 'Norway',
                'habitat': 'Forest'
            }
        )
        
        # Create or get deployment
        deployment_id = f"NINA_{device_id[-6:]}"
        deployment, created = Deployment.objects.get_or_create(
            deployment_ID=deployment_id,
            device=device,
            defaults={
                'device_type': audio_type,
                'deployment_start': timezone.now() - datetime.timedelta(days=30),
                'site': default_site,
                'is_active': True
            }
        )
        
        # Add project to deployment
        deployment.project.add(nina_project)
        
        # Find all audio files in this device folder
        audio_extensions = ['.wav', '.mp3', '.aac', '.flac']
        audio_files = []
        for ext in audio_extensions:
            pattern = os.path.join(folder_path, f"**/*{ext}")
            audio_files.extend(glob.glob(pattern, recursive=True))
        
        # Import each audio file
        for file_path in audio_files:
            file_name = os.path.basename(file_path)
            file_base, file_ext = os.path.splitext(file_name)
            rel_path = os.path.relpath(os.path.dirname(file_path), base_dir)
            
            # Get file size and creation time
            try:
                file_size = os.path.getsize(file_path)
                create_time = datetime.datetime.fromtimestamp(
                    os.path.getctime(file_path),
                    tz=timezone.get_current_timezone()
                )
            except (FileNotFoundError, OSError):
                continue
            
            # Check if file already exists in database
            if not DataFile.objects.filter(file_name=file_base).exists():
                # Create data file record
                data_file = DataFile(
                    deployment=deployment,
                    file_type=audio_type,
                    file_name=file_base,
                    file_size=file_size,
                    file_format=file_ext,
                    upload_dt=timezone.now(),
                    recording_dt=create_time,
                    path=rel_path,
                    local_path=base_dir,
                    local_storage=True,
                    # Set appropriate audio properties if available
                    sample_rate=44100,  # Default sample rate
                    file_length='00:01:00',  # Default length
                    config='DEFAULT'
                )
                data_file.save()


def reverse_migration(apps, schema_editor):
    """
    Remove all data files imported from the proj_tabmon_NINA folders.
    """
    DataFile = apps.get_model('data_models', 'DataFile')
    base_dir = "/Users/noahsyrdal/ARISE-MDS-sensor-portal-Pam/proj_tabmon_NINA"
    
    # Delete all files with the specified base path
    DataFile.objects.filter(local_path=base_dir).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('data_models', '0019_rename_archives_project_archive_and_more'),
    ]

    operations = [
        migrations.RunPython(discover_and_import_audio_files, reverse_migration),
    ] 