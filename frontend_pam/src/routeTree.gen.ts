/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MapImport } from './routes/map'
import { Route as LoginImport } from './routes/login'
import { Route as CallImport } from './routes/call'
import { Route as IndexImport } from './routes/index'
import { Route as DevicesIndexImport } from './routes/devices/index'
import { Route as DevicesDeviceIdIndexImport } from './routes/devices/$deviceId/index'
import { Route as DevicesDeviceIdDataFileIdImport } from './routes/devices/$deviceId/$dataFileId'
import { Route as DevicesDeviceIdDataFileIdObservationsImport } from './routes/devices/$deviceId/$dataFileId/observations'

// Create/Update Routes

const MapRoute = MapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CallRoute = CallImport.update({
  id: '/call',
  path: '/call',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesIndexRoute = DevicesIndexImport.update({
  id: '/devices/',
  path: '/devices/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesDeviceIdIndexRoute = DevicesDeviceIdIndexImport.update({
  id: '/devices/$deviceId/',
  path: '/devices/$deviceId/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesDeviceIdDataFileIdRoute = DevicesDeviceIdDataFileIdImport.update({
  id: '/devices/$deviceId/$dataFileId',
  path: '/devices/$deviceId/$dataFileId',
  getParentRoute: () => rootRoute,
} as any)

const DevicesDeviceIdDataFileIdObservationsRoute =
  DevicesDeviceIdDataFileIdObservationsImport.update({
    id: '/observations',
    path: '/observations',
    getParentRoute: () => DevicesDeviceIdDataFileIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/call': {
      id: '/call'
      path: '/call'
      fullPath: '/call'
      preLoaderRoute: typeof CallImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      parentRoute: typeof rootRoute
    }
    '/devices/': {
      id: '/devices/'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/devices/$deviceId/$dataFileId': {
      id: '/devices/$deviceId/$dataFileId'
      path: '/devices/$deviceId/$dataFileId'
      fullPath: '/devices/$deviceId/$dataFileId'
      preLoaderRoute: typeof DevicesDeviceIdDataFileIdImport
      parentRoute: typeof rootRoute
    }
    '/devices/$deviceId/': {
      id: '/devices/$deviceId/'
      path: '/devices/$deviceId'
      fullPath: '/devices/$deviceId'
      preLoaderRoute: typeof DevicesDeviceIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/devices/$deviceId/$dataFileId/observations': {
      id: '/devices/$deviceId/$dataFileId/observations'
      path: '/observations'
      fullPath: '/devices/$deviceId/$dataFileId/observations'
      preLoaderRoute: typeof DevicesDeviceIdDataFileIdObservationsImport
      parentRoute: typeof DevicesDeviceIdDataFileIdImport
    }
  }
}

// Create and export the route tree

interface DevicesDeviceIdDataFileIdRouteChildren {
  DevicesDeviceIdDataFileIdObservationsRoute: typeof DevicesDeviceIdDataFileIdObservationsRoute
}

const DevicesDeviceIdDataFileIdRouteChildren: DevicesDeviceIdDataFileIdRouteChildren =
  {
    DevicesDeviceIdDataFileIdObservationsRoute:
      DevicesDeviceIdDataFileIdObservationsRoute,
  }

const DevicesDeviceIdDataFileIdRouteWithChildren =
  DevicesDeviceIdDataFileIdRoute._addFileChildren(
    DevicesDeviceIdDataFileIdRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/call': typeof CallRoute
  '/login': typeof LoginRoute
  '/map': typeof MapRoute
  '/devices': typeof DevicesIndexRoute
  '/devices/$deviceId/$dataFileId': typeof DevicesDeviceIdDataFileIdRouteWithChildren
  '/devices/$deviceId': typeof DevicesDeviceIdIndexRoute
  '/devices/$deviceId/$dataFileId/observations': typeof DevicesDeviceIdDataFileIdObservationsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/call': typeof CallRoute
  '/login': typeof LoginRoute
  '/map': typeof MapRoute
  '/devices': typeof DevicesIndexRoute
  '/devices/$deviceId/$dataFileId': typeof DevicesDeviceIdDataFileIdRouteWithChildren
  '/devices/$deviceId': typeof DevicesDeviceIdIndexRoute
  '/devices/$deviceId/$dataFileId/observations': typeof DevicesDeviceIdDataFileIdObservationsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/call': typeof CallRoute
  '/login': typeof LoginRoute
  '/map': typeof MapRoute
  '/devices/': typeof DevicesIndexRoute
  '/devices/$deviceId/$dataFileId': typeof DevicesDeviceIdDataFileIdRouteWithChildren
  '/devices/$deviceId/': typeof DevicesDeviceIdIndexRoute
  '/devices/$deviceId/$dataFileId/observations': typeof DevicesDeviceIdDataFileIdObservationsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/call'
    | '/login'
    | '/map'
    | '/devices'
    | '/devices/$deviceId/$dataFileId'
    | '/devices/$deviceId'
    | '/devices/$deviceId/$dataFileId/observations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/call'
    | '/login'
    | '/map'
    | '/devices'
    | '/devices/$deviceId/$dataFileId'
    | '/devices/$deviceId'
    | '/devices/$deviceId/$dataFileId/observations'
  id:
    | '__root__'
    | '/'
    | '/call'
    | '/login'
    | '/map'
    | '/devices/'
    | '/devices/$deviceId/$dataFileId'
    | '/devices/$deviceId/'
    | '/devices/$deviceId/$dataFileId/observations'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CallRoute: typeof CallRoute
  LoginRoute: typeof LoginRoute
  MapRoute: typeof MapRoute
  DevicesIndexRoute: typeof DevicesIndexRoute
  DevicesDeviceIdDataFileIdRoute: typeof DevicesDeviceIdDataFileIdRouteWithChildren
  DevicesDeviceIdIndexRoute: typeof DevicesDeviceIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CallRoute: CallRoute,
  LoginRoute: LoginRoute,
  MapRoute: MapRoute,
  DevicesIndexRoute: DevicesIndexRoute,
  DevicesDeviceIdDataFileIdRoute: DevicesDeviceIdDataFileIdRouteWithChildren,
  DevicesDeviceIdIndexRoute: DevicesDeviceIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/call",
        "/login",
        "/map",
        "/devices/",
        "/devices/$deviceId/$dataFileId",
        "/devices/$deviceId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/call": {
      "filePath": "call.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    },
    "/devices/": {
      "filePath": "devices/index.tsx"
    },
    "/devices/$deviceId/$dataFileId": {
      "filePath": "devices/$deviceId/$dataFileId.tsx",
      "children": [
        "/devices/$deviceId/$dataFileId/observations"
      ]
    },
    "/devices/$deviceId/": {
      "filePath": "devices/$deviceId/index.tsx"
    },
    "/devices/$deviceId/$dataFileId/observations": {
      "filePath": "devices/$deviceId/$dataFileId/observations.tsx",
      "parent": "/devices/$deviceId/$dataFileId"
    }
  }
}
ROUTE_MANIFEST_END */
