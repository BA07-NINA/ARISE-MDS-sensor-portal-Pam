/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ObservationsImport } from './routes/observations'
import { Route as MapImport } from './routes/map'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as DeploymentsIndexImport } from './routes/deployments/index'
import { Route as DeploymentsSiteNameIndexImport } from './routes/deployments/$siteName/index'
import { Route as DeploymentsSiteNameDataFileIdImport } from './routes/deployments/$siteName/$dataFileId'
import { Route as DevicesDeviceIdDataFileIdObservationsImport } from './routes/devices/$deviceId/$dataFileId/observations'

// Create/Update Routes

const ObservationsRoute = ObservationsImport.update({
  id: '/observations',
  path: '/observations',
  getParentRoute: () => rootRoute,
} as any)

const MapRoute = MapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DeploymentsIndexRoute = DeploymentsIndexImport.update({
  id: '/deployments/',
  path: '/deployments/',
  getParentRoute: () => rootRoute,
} as any)

const DeploymentsSiteNameIndexRoute = DeploymentsSiteNameIndexImport.update({
  id: '/deployments/$siteName/',
  path: '/deployments/$siteName/',
  getParentRoute: () => rootRoute,
} as any)

const DeploymentsSiteNameDataFileIdRoute =
  DeploymentsSiteNameDataFileIdImport.update({
    id: '/deployments/$siteName/$dataFileId',
    path: '/deployments/$siteName/$dataFileId',
    getParentRoute: () => rootRoute,
  } as any)

const DevicesDeviceIdDataFileIdObservationsRoute =
  DevicesDeviceIdDataFileIdObservationsImport.update({
    id: '/devices/$deviceId/$dataFileId/observations',
    path: '/devices/$deviceId/$dataFileId/observations',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      parentRoute: typeof rootRoute
    }
    '/observations': {
      id: '/observations'
      path: '/observations'
      fullPath: '/observations'
      preLoaderRoute: typeof ObservationsImport
      parentRoute: typeof rootRoute
    }
    '/deployments/': {
      id: '/deployments/'
      path: '/deployments'
      fullPath: '/deployments'
      preLoaderRoute: typeof DeploymentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/deployments/$siteName/$dataFileId': {
      id: '/deployments/$siteName/$dataFileId'
      path: '/deployments/$siteName/$dataFileId'
      fullPath: '/deployments/$siteName/$dataFileId'
      preLoaderRoute: typeof DeploymentsSiteNameDataFileIdImport
      parentRoute: typeof rootRoute
    }
    '/deployments/$siteName/': {
      id: '/deployments/$siteName/'
      path: '/deployments/$siteName'
      fullPath: '/deployments/$siteName'
      preLoaderRoute: typeof DeploymentsSiteNameIndexImport
      parentRoute: typeof rootRoute
    }
    '/devices/$deviceId/$dataFileId/observations': {
      id: '/devices/$deviceId/$dataFileId/observations'
      path: '/devices/$deviceId/$dataFileId/observations'
      fullPath: '/devices/$deviceId/$dataFileId/observations'
      preLoaderRoute: typeof DevicesDeviceIdDataFileIdObservationsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/map': typeof MapRoute
  '/observations': typeof ObservationsRoute
  '/deployments': typeof DeploymentsIndexRoute
  '/deployments/$siteName/$dataFileId': typeof DeploymentsSiteNameDataFileIdRoute
  '/deployments/$siteName': typeof DeploymentsSiteNameIndexRoute
  '/devices/$deviceId/$dataFileId/observations': typeof DevicesDeviceIdDataFileIdObservationsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/map': typeof MapRoute
  '/observations': typeof ObservationsRoute
  '/deployments': typeof DeploymentsIndexRoute
  '/deployments/$siteName/$dataFileId': typeof DeploymentsSiteNameDataFileIdRoute
  '/deployments/$siteName': typeof DeploymentsSiteNameIndexRoute
  '/devices/$deviceId/$dataFileId/observations': typeof DevicesDeviceIdDataFileIdObservationsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/map': typeof MapRoute
  '/observations': typeof ObservationsRoute
  '/deployments/': typeof DeploymentsIndexRoute
  '/deployments/$siteName/$dataFileId': typeof DeploymentsSiteNameDataFileIdRoute
  '/deployments/$siteName/': typeof DeploymentsSiteNameIndexRoute
  '/devices/$deviceId/$dataFileId/observations': typeof DevicesDeviceIdDataFileIdObservationsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/map'
    | '/observations'
    | '/deployments'
    | '/deployments/$siteName/$dataFileId'
    | '/deployments/$siteName'
    | '/devices/$deviceId/$dataFileId/observations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/map'
    | '/observations'
    | '/deployments'
    | '/deployments/$siteName/$dataFileId'
    | '/deployments/$siteName'
    | '/devices/$deviceId/$dataFileId/observations'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/map'
    | '/observations'
    | '/deployments/'
    | '/deployments/$siteName/$dataFileId'
    | '/deployments/$siteName/'
    | '/devices/$deviceId/$dataFileId/observations'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  MapRoute: typeof MapRoute
  ObservationsRoute: typeof ObservationsRoute
  DeploymentsIndexRoute: typeof DeploymentsIndexRoute
  DeploymentsSiteNameDataFileIdRoute: typeof DeploymentsSiteNameDataFileIdRoute
  DeploymentsSiteNameIndexRoute: typeof DeploymentsSiteNameIndexRoute
  DevicesDeviceIdDataFileIdObservationsRoute: typeof DevicesDeviceIdDataFileIdObservationsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  MapRoute: MapRoute,
  ObservationsRoute: ObservationsRoute,
  DeploymentsIndexRoute: DeploymentsIndexRoute,
  DeploymentsSiteNameDataFileIdRoute: DeploymentsSiteNameDataFileIdRoute,
  DeploymentsSiteNameIndexRoute: DeploymentsSiteNameIndexRoute,
  DevicesDeviceIdDataFileIdObservationsRoute:
    DevicesDeviceIdDataFileIdObservationsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/map",
        "/observations",
        "/deployments/",
        "/deployments/$siteName/$dataFileId",
        "/deployments/$siteName/",
        "/devices/$deviceId/$dataFileId/observations"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    },
    "/observations": {
      "filePath": "observations.tsx"
    },
    "/deployments/": {
      "filePath": "deployments/index.tsx"
    },
    "/deployments/$siteName/$dataFileId": {
      "filePath": "deployments/$siteName/$dataFileId.tsx"
    },
    "/deployments/$siteName/": {
      "filePath": "deployments/$siteName/index.tsx"
    },
    "/devices/$deviceId/$dataFileId/observations": {
      "filePath": "devices/$deviceId/$dataFileId/observations.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
